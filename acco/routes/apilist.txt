1. authcheck
2. getfooditem
3. getrole
4. userproof pending show error(becase double time get same for updateuserimage)
5. roombooked pending post method
6. addbooking
7. updateuserimage done
8. adduser
9. getbooking
10. getuser
11. auth
12. getfloor
13. getroom/:floornumber
14. getbhk/:noofbhk
15. getChargedAmenities
16. generateOTP
17. verifyOTP not use userid in table check
18. getroomsplit
19. getroomlist
20. getroom
21. getplacetovisit
22. cancelroombook/:id
23. updatebooking







router.post('/actualcheckin',  function(req, res)  {
  try {
    // will give email and phone no 
    var command='select * from booking where bookingid='+req.query.bookingid+'';
    con.query(command,function(getreq,getres){
      if(getres.affectedRows>=1)
      {
        
      console.log("aff row",getres.affectedRows);
      console.log(command);
      console.log(getres);
//will inclde or get 3bhcount
        if(getres[0].bhk2count>=1 & getres[0].bhk2count<=9 )
          {
            //will include time for cin and cout
            cin=moment(getres[0].checkin).format('YYYY-MM-DD');
            // cout=moment(getres[0].checkout).format('YYYY-MM-DD HH:mm:ss');
            
            cout=moment(getres[0].checkout).format('YYYY-MM-DD');
            console.log(cin);
            console.log(cout);
            console.log(getres[0].bhk2count);
            var getcmd='select COUNT(roomname) AS roomcount,rtype ,price,roomname ,json_array(GROUP_CONCAT(roomno)) AS roomno,GROUP_CONCAT(roomid) AS roomids from room where roomid NOT IN (SELECT roomid from booking WHERE (checkin  BETWEEN '+cin+' AND '+cout+' OR checkout BETWEEN '+cin+' AND '+cout+')) GROUP BY rtype,price,roomname'
            console.log("getcmd",getcmd);       
            con.query(getcmd,function(err,gresu){
              //not in booking tblla  get room id
              // console.log("room id",getres[0].roomid);

              //tamil spreTE API
              //  1-101 CHECK KEY VALUE
              // ID CARD UPLOAD AONTOER API 
              // var command = sprintf('update booking set acheckin=' + "'" + req.query.acheckin + "'," + ' bhk2count='+getres[0].bhk2count+', bhk3count='+getres[0].bhk3count+' WHERE bookingid=' + req.query.bookingid +'');
              var command = sprintf('update booking set acheckin=' + "'" + req.query.acheckin + "'," + ' bhk2count='+getres[0].bhk2count+', bhk3count='+getres[0].bhk3count+' WHERE bookingid=' + req.query.bookingid +'');
  console.log("part 3",command);          
  
    let data = [true, 1];
    console.log("after", command);
    con.query(command, data, function (error, updateresult) {
      // console.log("affectedRows", updateresult.affectedRows);
        if (error) {
res.send("Check Mail Id");
        console.log("Check Mail Id");
        }
      else {
            console.log("3 part result",gresu);
            res.status(200).send({"First Part ":getres,"Roomlist":gresu,updateresult});
          }
          })
        })
        //   
    
  }
  else
  {
    console.log("Something wrong");
  }
}
else{
  console.log("aff row",getres.affectedRows);
  res.send("Check Booking Id");
}
  })}
  catch (e) {
    console.log("Catch");
    const statusCode = e.statusCoderes || 500;
    res.status(statusCode, "Error").json({ success: 0, message: e.message, status: statusCode });
  }
})

//end frontoff a checkin




// guest api 

//st get guest detail

router.get('/getguestdetail/:checkin',authcheck, function (req, res) {
  try {
    // sdate=req.params.checkin
    console.log("parms",req.params.checkin);
    command =( "select * from booking where checkin BETWEEN "+"'"+req.params.checkin+ ' 00:00:01'+ " '"+' AND ' +"'"+req.params.checkin+' 23:59:59'+"'");
    console.log(command);
    con.query(command, function (error, results) {
      console.log(results.acheckin);
      console.log("len",results.length);
      // console.log(results.acheckin);
      console.log("acheckin",results.acheckin);
      var green=results.acheckin<results.checkin
      console.log("green",green);
      var red=results.acheckin<results.checkin
      console.log("RED ",red);
      var willinform=results.acheckin=0;
      console.log("will inform",willinform);

      if (results.length>=1) {
      // if(acheckin>checkin){
        res.send(results)
        
      }
      else {
        res.send({ "Message": "Unable to get Date "});
      }
    })
  }
  catch (e) {
    console.log("Catch");
    const statusCode = e.statusCoderes || 500;
    res.status(statusCode, "Error").json({ success: 0, message: e.message, status: statusCode });
  }
})


//end guest detail


otpgen api

router.post('/generateOTP', (req, res) => {
  // var email = req.body;
 
  // var userid=
  console.log(email);
  var otpCode = Math.floor(100000 + Math.random() * 900000);
  console.log("otpcode", otpCode);


  // var date_ob = new Date();

  // var day = ("0" + date_ob.getDate()).slice(-2);
  //   var month = ("0" + (date_ob.getMonth() + 1)).slice(-2);
  //   var year = date_ob.getFullYear();

  //   // var date = year + "-" + month + "-" + day;
  //   // console.log(date);

  //   // var hours = date_ob.getHours();
  //   // var minutes = date_ob.getMinutes();
  //   // var seconds = date_ob.getSeconds();

  //   // var dateTime = year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
  //   var hours = date_ob.getHours();
  // var minutes = date_ob.getMinutes();
  // var tenminutes = date_ob.getMinutes()+10;
  // var seconds = date_ob.getSeconds();

  // var otpcTime =   year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
  // console.log("ctime",otpcTime);

  // var otpeTime =   year + "-" + month + "-" + day + " " + hours + ":" + tenminutes + ":" + seconds;
  // function addten(date,minutes){
  //   return new Date(date.getTime()+minutes*60000);
  // }
  // console.log(addten);
  // c  onst now=new Date();
  // var otpeTime=addten(otpcTime,10);
  // console.log("et",otpeTime);
  //   var seconds = secondsToMinutes.split(':')[1];
  // var minutes = secondsToMinutes.split(':')[0];
  // var momentInTime = moment(...)
  //                    .add(seconds,'seconds')
  //                    .add(minutes,'minutes')
  //                    .format('LT');

  // var endTime = moment(startTime ,'HH:mm:ss').add(10,'seconds').format('HH:mm:ss');

  var mysqlTimestamp = moment(Date.now()).format('YYYY-MM-DD HH:mm:ss');
  var tensqlTimestamp = moment(Date.now()).add(10, 'minutes').format('YYYY-MM-DD HH:mm:ss');
  console.log("ten", tensqlTimestamp);


  var otpn = otpGenerator.generate(8, { upperCaseAlphabets: true, lowerCaseAlphabets: true, specialChars: true });
  console.log("newotp : ", otpn);

  var comm = sprintf('INSERT INTO otpstore (userid,name,phonenumber,otp,otptype,otpctime,otpetime,status) VALUES (%d, "%s","%s",%d,"%s","%s","%s",%d)', 1, req.body.name, req.body.phonenumber, otpCode, req.body.otptype, mysqlTimestamp, tensqlTimestamp, 1);
  // var comm=('INSERT INTO otpstore (userid,name,phonenumber,otp,otptype,otpctime,otpetime,status) VALUES' ("1",+req.body.name,req.body.phonenumber, otpCode, req.body.otptype,CURRENT_TIMESTAMP ,ADDTIME(CURRENT_TIMESTAMP, '0 0:10:0\'),1));
  console.log(comm);
  con.query(comm, function (err, result) {
    if (err) {
      // console.log(err);
      res.send({ status: false, message: err });
    }
    else {

      res.send(result);
      res.end();
    }
  })
});




getpf

router.get('/muthugetpdf', function (req, res) {
    try {
        console.log("Welcome to Create PDF");
        cmd = ('SELECT *,(SELECT roomno FROM room WHERE booking.roomid=room.roomid) AS roomno,(SELECT roomname FROM room WHERE booking.roomid=room.roomid) AS roomname FROM booking WHERE bookingid=' + req.query.bookingid + '');
        con.query(cmd, (err, result) => {
            console.log("len", result.length);
            if (result.length >= 1) {
                if (err) {
                    console.log("Error", err);
                    res.send("Pls Check Booking Id");
                } else {
                    console.log(cmd);
                    console.log(result);
                    res.send({ result });
                    const { writeFile } = require('fs');
                    // const storagespace = multer.diskStorage({
                    //     destination: 'C:/accouserimage/proof',
                    //     filee: (req1, file, cb) => {
                    //       return cb(null, `${file.fieldname}_${Date.now()}${path.extname(file.originalname)}`)
                    //     }
                    //   })
                    // doc.pipe(fs.createWriteStream(`/invoice/${Date.now()}` + 'Invoice.pdf'));
                    const path = `./invoice_${req.query.bookingid}_${Date.now()}.json`;
                    // const config = JSON.stringify(result);
                    const config = (result);
                    writeFile(path, JSON.stringify(config, null, 2), (error) => {
                        if (error) {
                            console.log(error);
                            return;
                        }
                        else {
                            var cmdinsert = sprintf('INSERT INTO invoicedata(bookingid,data,status)values(%d,%j,%d)', req.query.bookingid, config, 1);
                            con.query(cmdinsert, (inerror, inresult) => {
                                console.log("cmdinser", cmdinsert);
                                if (inerror) {
                                    console.log("Some Error");
                                    // res.send({result});
                                } else {
                                    console.log("Insert Done");
                                    res.send("Inser t done");

                                }
                            });
                        }
                    })
                }
            } else {
                console.log("Pls check Booking Id");
                res.send("Pls Check Booking Id");
            }
        })
    }
    catch (e) {
        console.log("Catch", e);
        const statusCode = e.statusCoderes || 500;
        res.status(statusCode, "Error").json({ success: 0, message: e.message, status: statusCode });
    }
})

